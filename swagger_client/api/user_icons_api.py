# coding: utf-8

"""
    SUPLA Cloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class UserIconsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_user_icon(self, **kwargs):  # noqa: E501
        """Create a new User Icon  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_user_icon(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ChannelFunctionEnumNames function:
        :param int source_icon:
        :param str image1:
        :param str image2:
        :param str image3:
        :param str image4:
        :return: AccessIdentifier
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_user_icon_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_user_icon_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_user_icon_with_http_info(self, **kwargs):  # noqa: E501
        """Create a new User Icon  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_user_icon_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ChannelFunctionEnumNames function:
        :param int source_icon:
        :param str image1:
        :param str image2:
        :param str image3:
        :param str image4:
        :return: AccessIdentifier
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['function', 'source_icon', 'image1', 'image2', 'image3', 'image4']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_user_icon" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'function' in params:
            form_params.append(('function', params['function']))  # noqa: E501
        if 'source_icon' in params:
            form_params.append(('sourceIcon', params['source_icon']))  # noqa: E501
        if 'image1' in params:
            form_params.append(('image1', params['image1']))  # noqa: E501
        if 'image2' in params:
            form_params.append(('image2', params['image2']))  # noqa: E501
        if 'image3' in params:
            form_params.append(('image3', params['image3']))  # noqa: E501
        if 'image4' in params:
            form_params.append(('image4', params['image4']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BearerAuth', 'OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/user-icons', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccessIdentifier',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_user_icon(self, id, **kwargs):  # noqa: E501
        """Delete User Icon  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_user_icon(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_user_icon_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_user_icon_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def delete_user_icon_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete User Icon  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_user_icon_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_user_icon" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_user_icon`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['BearerAuth', 'OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/user-icons/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_user_icons(self, **kwargs):  # noqa: E501
        """Get user icons  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_icons(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] include: Specify what extra fields to include in the response.
        :param list[ChannelFunctionEnumNames] function: Return only icons for given function
        :param list[int] ids: Return only icons with given identifiers
        :return: list[UserIcon]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_user_icons_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_user_icons_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_user_icons_with_http_info(self, **kwargs):  # noqa: E501
        """Get user icons  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_icons_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] include: Specify what extra fields to include in the response.
        :param list[ChannelFunctionEnumNames] function: Return only icons for given function
        :param list[int] ids: Return only icons with given identifiers
        :return: list[UserIcon]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['include', 'function', 'ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_icons" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'include' in params:
            query_params.append(('include', params['include']))  # noqa: E501
            collection_formats['include'] = 'multi'  # noqa: E501
        if 'function' in params:
            query_params.append(('function', params['function']))  # noqa: E501
            collection_formats['function'] = 'multi'  # noqa: E501
        if 'ids' in params:
            query_params.append(('ids', params['ids']))  # noqa: E501
            collection_formats['ids'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BearerAuth', 'OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/user-icons', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[UserIcon]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_icons_id_image_index_get(self, id, image_index, **kwargs):  # noqa: E501
        """Get User Icon image at specified index  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_icons_id_image_index_get(id, image_index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param int image_index: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_icons_id_image_index_get_with_http_info(id, image_index, **kwargs)  # noqa: E501
        else:
            (data) = self.user_icons_id_image_index_get_with_http_info(id, image_index, **kwargs)  # noqa: E501
            return data

    def user_icons_id_image_index_get_with_http_info(self, id, image_index, **kwargs):  # noqa: E501
        """Get User Icon image at specified index  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_icons_id_image_index_get_with_http_info(id, image_index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param int image_index: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'image_index']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_icons_id_image_index_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `user_icons_id_image_index_get`")  # noqa: E501
        # verify the required parameter 'image_index' is set
        if ('image_index' not in params or
                params['image_index'] is None):
            raise ValueError("Missing the required parameter `image_index` when calling `user_icons_id_image_index_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'image_index' in params:
            path_params['imageIndex'] = params['image_index']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['image/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BearerAuth', 'OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/user-icons/{id}/{imageIndex}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

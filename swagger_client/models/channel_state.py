# coding: utf-8

"""
    SUPLA Cloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.big_decimal import BigDecimal  # noqa: F401,E501
from swagger_client.models.brightness_state import BrightnessState  # noqa: F401,E501
from swagger_client.models.color_and_brightness_state import ColorAndBrightnessState  # noqa: F401,E501
from swagger_client.models.color_state import ColorState  # noqa: F401,E501
from swagger_client.models.depth_state import DepthState  # noqa: F401,E501
from swagger_client.models.distance_state import DistanceState  # noqa: F401,E501
from swagger_client.models.hi_state import HiState  # noqa: F401,E501
from swagger_client.models.humidity_state import HumidityState  # noqa: F401,E501
from swagger_client.models.on_state import OnState  # noqa: F401,E501
from swagger_client.models.partial_open_state import PartialOpenState  # noqa: F401,E501
from swagger_client.models.roller_shutter_state import RollerShutterState  # noqa: F401,E501
from swagger_client.models.temperature_and_humidity_state import TemperatureAndHumidityState  # noqa: F401,E501
from swagger_client.models.temperature_state import TemperatureState  # noqa: F401,E501


class ChannelState(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'connected': 'bool',
        'brightness': 'int',
        'color_brightness': 'int',
        'color': 'str',
        'depth': 'BigDecimal',
        'distance': 'BigDecimal',
        'humidity': 'BigDecimal',
        'on': 'bool',
        'hi': 'bool',
        'partial_hi': 'bool',
        'is_calibrating': 'bool',
        'shut': 'int',
        'temperature': 'BigDecimal'
    }

    attribute_map = {
        'connected': 'connected',
        'brightness': 'brightness',
        'color_brightness': 'color_brightness',
        'color': 'color',
        'depth': 'depth',
        'distance': 'distance',
        'humidity': 'humidity',
        'on': 'on',
        'hi': 'hi',
        'partial_hi': 'partial_hi',
        'is_calibrating': 'is_calibrating',
        'shut': 'shut',
        'temperature': 'temperature'
    }

    def __init__(self, connected=None, brightness=None, color_brightness=None, color=None, depth=None, distance=None, humidity=None, on=None, hi=None, partial_hi=None, is_calibrating=None, shut=None, temperature=None):  # noqa: E501
        """ChannelState - a model defined in Swagger"""  # noqa: E501
        self._connected = None
        self._brightness = None
        self._color_brightness = None
        self._color = None
        self._depth = None
        self._distance = None
        self._humidity = None
        self._on = None
        self._hi = None
        self._partial_hi = None
        self._is_calibrating = None
        self._shut = None
        self._temperature = None
        self.discriminator = None
        self.connected = connected
        if brightness is not None:
            self.brightness = brightness
        if color_brightness is not None:
            self.color_brightness = color_brightness
        if color is not None:
            self.color = color
        if depth is not None:
            self.depth = depth
        if distance is not None:
            self.distance = distance
        if humidity is not None:
            self.humidity = humidity
        if on is not None:
            self.on = on
        if hi is not None:
            self.hi = hi
        if partial_hi is not None:
            self.partial_hi = partial_hi
        if is_calibrating is not None:
            self.is_calibrating = is_calibrating
        if shut is not None:
            self.shut = shut
        if temperature is not None:
            self.temperature = temperature

    @property
    def connected(self):
        """Gets the connected of this ChannelState.  # noqa: E501


        :return: The connected of this ChannelState.  # noqa: E501
        :rtype: bool
        """
        return self._connected

    @connected.setter
    def connected(self, connected):
        """Sets the connected of this ChannelState.


        :param connected: The connected of this ChannelState.  # noqa: E501
        :type: bool
        """
        if connected is None:
            raise ValueError("Invalid value for `connected`, must not be `None`")  # noqa: E501

        self._connected = connected

    @property
    def brightness(self):
        """Gets the brightness of this ChannelState.  # noqa: E501

        `brightness` contains current dimmer brightness value in percent, integer from 0 to 100  # noqa: E501

        :return: The brightness of this ChannelState.  # noqa: E501
        :rtype: int
        """
        return self._brightness

    @brightness.setter
    def brightness(self, brightness):
        """Sets the brightness of this ChannelState.

        `brightness` contains current dimmer brightness value in percent, integer from 0 to 100  # noqa: E501

        :param brightness: The brightness of this ChannelState.  # noqa: E501
        :type: int
        """

        self._brightness = brightness

    @property
    def color_brightness(self):
        """Gets the color_brightness of this ChannelState.  # noqa: E501

        `color_brightness` is a color brightness in percent, integer from 0 to 100  # noqa: E501

        :return: The color_brightness of this ChannelState.  # noqa: E501
        :rtype: int
        """
        return self._color_brightness

    @color_brightness.setter
    def color_brightness(self, color_brightness):
        """Sets the color_brightness of this ChannelState.

        `color_brightness` is a color brightness in percent, integer from 0 to 100  # noqa: E501

        :param color_brightness: The color_brightness of this ChannelState.  # noqa: E501
        :type: int
        """

        self._color_brightness = color_brightness

    @property
    def color(self):
        """Gets the color of this ChannelState.  # noqa: E501

        `color` contains the integer (hex) value of a current color, ranging from `0x000001` to `0xFFFFFF`  # noqa: E501

        :return: The color of this ChannelState.  # noqa: E501
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this ChannelState.

        `color` contains the integer (hex) value of a current color, ranging from `0x000001` to `0xFFFFFF`  # noqa: E501

        :param color: The color of this ChannelState.  # noqa: E501
        :type: str
        """

        self._color = color

    @property
    def depth(self):
        """Gets the depth of this ChannelState.  # noqa: E501

        `depth` contains current sensor value  # noqa: E501

        :return: The depth of this ChannelState.  # noqa: E501
        :rtype: BigDecimal
        """
        return self._depth

    @depth.setter
    def depth(self, depth):
        """Sets the depth of this ChannelState.

        `depth` contains current sensor value  # noqa: E501

        :param depth: The depth of this ChannelState.  # noqa: E501
        :type: BigDecimal
        """

        self._depth = depth

    @property
    def distance(self):
        """Gets the distance of this ChannelState.  # noqa: E501

        `distance` contains current sensor value  # noqa: E501

        :return: The distance of this ChannelState.  # noqa: E501
        :rtype: BigDecimal
        """
        return self._distance

    @distance.setter
    def distance(self, distance):
        """Sets the distance of this ChannelState.

        `distance` contains current sensor value  # noqa: E501

        :param distance: The distance of this ChannelState.  # noqa: E501
        :type: BigDecimal
        """

        self._distance = distance

    @property
    def humidity(self):
        """Gets the humidity of this ChannelState.  # noqa: E501

        `humidity` contains current value of humidity provided by the sensor (including possibly configured delta adjustment), in percent; possible values from 0 to 100  # noqa: E501

        :return: The humidity of this ChannelState.  # noqa: E501
        :rtype: BigDecimal
        """
        return self._humidity

    @humidity.setter
    def humidity(self, humidity):
        """Sets the humidity of this ChannelState.

        `humidity` contains current value of humidity provided by the sensor (including possibly configured delta adjustment), in percent; possible values from 0 to 100  # noqa: E501

        :param humidity: The humidity of this ChannelState.  # noqa: E501
        :type: BigDecimal
        """

        self._humidity = humidity

    @property
    def on(self):
        """Gets the on of this ChannelState.  # noqa: E501

        `on` is either `true` or `false` depending on the switch state  # noqa: E501

        :return: The on of this ChannelState.  # noqa: E501
        :rtype: bool
        """
        return self._on

    @on.setter
    def on(self, on):
        """Sets the on of this ChannelState.

        `on` is either `true` or `false` depending on the switch state  # noqa: E501

        :param on: The on of this ChannelState.  # noqa: E501
        :type: bool
        """

        self._on = on

    @property
    def hi(self):
        """Gets the hi of this ChannelState.  # noqa: E501

        `hi` is either `true` or `false` depending on sensor state  # noqa: E501

        :return: The hi of this ChannelState.  # noqa: E501
        :rtype: bool
        """
        return self._hi

    @hi.setter
    def hi(self, hi):
        """Sets the hi of this ChannelState.

        `hi` is either `true` or `false` depending on sensor state  # noqa: E501

        :param hi: The hi of this ChannelState.  # noqa: E501
        :type: bool
        """

        self._hi = hi

    @property
    def partial_hi(self):
        """Gets the partial_hi of this ChannelState.  # noqa: E501

        `partial_hi` is either `true` or `false` depending on paired secondary opening sensor state  # noqa: E501

        :return: The partial_hi of this ChannelState.  # noqa: E501
        :rtype: bool
        """
        return self._partial_hi

    @partial_hi.setter
    def partial_hi(self, partial_hi):
        """Sets the partial_hi of this ChannelState.

        `partial_hi` is either `true` or `false` depending on paired secondary opening sensor state  # noqa: E501

        :param partial_hi: The partial_hi of this ChannelState.  # noqa: E501
        :type: bool
        """

        self._partial_hi = partial_hi

    @property
    def is_calibrating(self):
        """Gets the is_calibrating of this ChannelState.  # noqa: E501

        `is_calibrating` is `true` if the roller shutter has calibration in progres or if it hasn't been finished for whatever reason  # noqa: E501

        :return: The is_calibrating of this ChannelState.  # noqa: E501
        :rtype: bool
        """
        return self._is_calibrating

    @is_calibrating.setter
    def is_calibrating(self, is_calibrating):
        """Sets the is_calibrating of this ChannelState.

        `is_calibrating` is `true` if the roller shutter has calibration in progres or if it hasn't been finished for whatever reason  # noqa: E501

        :param is_calibrating: The is_calibrating of this ChannelState.  # noqa: E501
        :type: bool
        """

        self._is_calibrating = is_calibrating

    @property
    def shut(self):
        """Gets the shut of this ChannelState.  # noqa: E501

        `shut` is provided regardles off `is_calibrating` state and is an integer from 0 to 100, meaning the percantage of rolette being closed  # noqa: E501

        :return: The shut of this ChannelState.  # noqa: E501
        :rtype: int
        """
        return self._shut

    @shut.setter
    def shut(self, shut):
        """Sets the shut of this ChannelState.

        `shut` is provided regardles off `is_calibrating` state and is an integer from 0 to 100, meaning the percantage of rolette being closed  # noqa: E501

        :param shut: The shut of this ChannelState.  # noqa: E501
        :type: int
        """

        self._shut = shut

    @property
    def temperature(self):
        """Gets the temperature of this ChannelState.  # noqa: E501

        `temperature` contains current value of temperature provided by the sensor (including possibly configured delta adjustment), in Celsius  # noqa: E501

        :return: The temperature of this ChannelState.  # noqa: E501
        :rtype: BigDecimal
        """
        return self._temperature

    @temperature.setter
    def temperature(self, temperature):
        """Sets the temperature of this ChannelState.

        `temperature` contains current value of temperature provided by the sensor (including possibly configured delta adjustment), in Celsius  # noqa: E501

        :param temperature: The temperature of this ChannelState.  # noqa: E501
        :type: BigDecimal
        """

        self._temperature = temperature

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ChannelState, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChannelState):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    SUPLA Cloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.channel_function_action import ChannelFunctionAction  # noqa: F401,E501
from swagger_client.models.channel_function_enum_names import ChannelFunctionEnumNames  # noqa: F401,E501


class ChannelFunction(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'float',
        'name': 'ChannelFunctionEnumNames',
        'caption': 'str',
        'max_alternative_icon_index': 'int',
        'possible_actions': 'list[ChannelFunctionAction]',
        'possible_visual_states': 'list[str]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'caption': 'caption',
        'max_alternative_icon_index': 'maxAlternativeIconIndex',
        'possible_actions': 'possibleActions',
        'possible_visual_states': 'possibleVisualStates'
    }

    def __init__(self, id=None, name=None, caption=None, max_alternative_icon_index=None, possible_actions=None, possible_visual_states=None):  # noqa: E501
        """ChannelFunction - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._caption = None
        self._max_alternative_icon_index = None
        self._possible_actions = None
        self._possible_visual_states = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if caption is not None:
            self.caption = caption
        if max_alternative_icon_index is not None:
            self.max_alternative_icon_index = max_alternative_icon_index
        if possible_actions is not None:
            self.possible_actions = possible_actions
        if possible_visual_states is not None:
            self.possible_visual_states = possible_visual_states

    @property
    def id(self):
        """Gets the id of this ChannelFunction.  # noqa: E501


        :return: The id of this ChannelFunction.  # noqa: E501
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ChannelFunction.


        :param id: The id of this ChannelFunction.  # noqa: E501
        :type: float
        """
        allowed_values = [0, 10, 20, 30, 40, 42, 45, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 180, 190, 200, 210, 220, 230, 240, 250, 260, 270, 280, 290, 300]  # noqa: E501
        if id not in allowed_values:
            raise ValueError(
                "Invalid value for `id` ({0}), must be one of {1}"  # noqa: E501
                .format(id, allowed_values)
            )

        self._id = id

    @property
    def name(self):
        """Gets the name of this ChannelFunction.  # noqa: E501


        :return: The name of this ChannelFunction.  # noqa: E501
        :rtype: ChannelFunctionEnumNames
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ChannelFunction.


        :param name: The name of this ChannelFunction.  # noqa: E501
        :type: ChannelFunctionEnumNames
        """

        self._name = name

    @property
    def caption(self):
        """Gets the caption of this ChannelFunction.  # noqa: E501


        :return: The caption of this ChannelFunction.  # noqa: E501
        :rtype: str
        """
        return self._caption

    @caption.setter
    def caption(self, caption):
        """Sets the caption of this ChannelFunction.


        :param caption: The caption of this ChannelFunction.  # noqa: E501
        :type: str
        """

        self._caption = caption

    @property
    def max_alternative_icon_index(self):
        """Gets the max_alternative_icon_index of this ChannelFunction.  # noqa: E501


        :return: The max_alternative_icon_index of this ChannelFunction.  # noqa: E501
        :rtype: int
        """
        return self._max_alternative_icon_index

    @max_alternative_icon_index.setter
    def max_alternative_icon_index(self, max_alternative_icon_index):
        """Sets the max_alternative_icon_index of this ChannelFunction.


        :param max_alternative_icon_index: The max_alternative_icon_index of this ChannelFunction.  # noqa: E501
        :type: int
        """

        self._max_alternative_icon_index = max_alternative_icon_index

    @property
    def possible_actions(self):
        """Gets the possible_actions of this ChannelFunction.  # noqa: E501

        What can you with with this channel?  # noqa: E501

        :return: The possible_actions of this ChannelFunction.  # noqa: E501
        :rtype: list[ChannelFunctionAction]
        """
        return self._possible_actions

    @possible_actions.setter
    def possible_actions(self, possible_actions):
        """Sets the possible_actions of this ChannelFunction.

        What can you with with this channel?  # noqa: E501

        :param possible_actions: The possible_actions of this ChannelFunction.  # noqa: E501
        :type: list[ChannelFunctionAction]
        """

        self._possible_actions = possible_actions

    @property
    def possible_visual_states(self):
        """Gets the possible_visual_states of this ChannelFunction.  # noqa: E501

        Possible visual states of channel with this function. Ordered.  # noqa: E501

        :return: The possible_visual_states of this ChannelFunction.  # noqa: E501
        :rtype: list[str]
        """
        return self._possible_visual_states

    @possible_visual_states.setter
    def possible_visual_states(self, possible_visual_states):
        """Sets the possible_visual_states of this ChannelFunction.

        Possible visual states of channel with this function. Ordered.  # noqa: E501

        :param possible_visual_states: The possible_visual_states of this ChannelFunction.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["opened", "closed", "partially_closed", "default", "empty", "full", "revealed", "shut", "true", "false", "rgb_on_dim_on", "rgb_on_dim_off", "rgb_off_dim_off", "rgb_off_dim_on"]  # noqa: E501
        if not set(possible_visual_states).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `possible_visual_states` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(possible_visual_states) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._possible_visual_states = possible_visual_states

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ChannelFunction, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChannelFunction):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    SUPLA Cloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class AuditEntry(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'event': 'int',
        'created_at': 'datetime',
        'ipv4': 'int',
        'int_param': 'int',
        'text_param': 'str'
    }

    attribute_map = {
        'id': 'id',
        'event': 'event',
        'created_at': 'createdAt',
        'ipv4': 'ipv4',
        'int_param': 'intParam',
        'text_param': 'textParam'
    }

    def __init__(self, id=None, event=None, created_at=None, ipv4=None, int_param=None, text_param=None):  # noqa: E501
        """AuditEntry - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._event = None
        self._created_at = None
        self._ipv4 = None
        self._int_param = None
        self._text_param = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if event is not None:
            self.event = event
        if created_at is not None:
            self.created_at = created_at
        if ipv4 is not None:
            self.ipv4 = ipv4
        if int_param is not None:
            self.int_param = int_param
        if text_param is not None:
            self.text_param = text_param

    @property
    def id(self):
        """Gets the id of this AuditEntry.  # noqa: E501


        :return: The id of this AuditEntry.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AuditEntry.


        :param id: The id of this AuditEntry.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def event(self):
        """Gets the event of this AuditEntry.  # noqa: E501


        :return: The event of this AuditEntry.  # noqa: E501
        :rtype: int
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this AuditEntry.


        :param event: The event of this AuditEntry.  # noqa: E501
        :type: int
        """

        self._event = event

    @property
    def created_at(self):
        """Gets the created_at of this AuditEntry.  # noqa: E501


        :return: The created_at of this AuditEntry.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this AuditEntry.


        :param created_at: The created_at of this AuditEntry.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def ipv4(self):
        """Gets the ipv4 of this AuditEntry.  # noqa: E501


        :return: The ipv4 of this AuditEntry.  # noqa: E501
        :rtype: int
        """
        return self._ipv4

    @ipv4.setter
    def ipv4(self, ipv4):
        """Sets the ipv4 of this AuditEntry.


        :param ipv4: The ipv4 of this AuditEntry.  # noqa: E501
        :type: int
        """

        self._ipv4 = ipv4

    @property
    def int_param(self):
        """Gets the int_param of this AuditEntry.  # noqa: E501


        :return: The int_param of this AuditEntry.  # noqa: E501
        :rtype: int
        """
        return self._int_param

    @int_param.setter
    def int_param(self, int_param):
        """Sets the int_param of this AuditEntry.


        :param int_param: The int_param of this AuditEntry.  # noqa: E501
        :type: int
        """

        self._int_param = int_param

    @property
    def text_param(self):
        """Gets the text_param of this AuditEntry.  # noqa: E501


        :return: The text_param of this AuditEntry.  # noqa: E501
        :rtype: str
        """
        return self._text_param

    @text_param.setter
    def text_param(self, text_param):
        """Sets the text_param of this AuditEntry.


        :param text_param: The text_param of this AuditEntry.  # noqa: E501
        :type: str
        """

        self._text_param = text_param

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AuditEntry, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuditEntry):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

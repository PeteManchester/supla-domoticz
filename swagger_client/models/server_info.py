# coding: utf-8

"""
    SUPLA Cloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.server_info_timezone import ServerInfoTimezone  # noqa: F401,E501


class ServerInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'str',
        'time': 'datetime',
        'timezone': 'ServerInfoTimezone',
        'authenticated': 'bool',
        'username': 'str',
        'cloud_version': 'str',
        'api_version': 'str',
        'supported_api_versions': 'list[str]'
    }

    attribute_map = {
        'address': 'address',
        'time': 'time',
        'timezone': 'timezone',
        'authenticated': 'authenticated',
        'username': 'username',
        'cloud_version': 'cloudVersion',
        'api_version': 'apiVersion',
        'supported_api_versions': 'supportedApiVersions'
    }

    def __init__(self, address=None, time=None, timezone=None, authenticated=None, username=None, cloud_version=None, api_version=None, supported_api_versions=None):  # noqa: E501
        """ServerInfo - a model defined in Swagger"""  # noqa: E501
        self._address = None
        self._time = None
        self._timezone = None
        self._authenticated = None
        self._username = None
        self._cloud_version = None
        self._api_version = None
        self._supported_api_versions = None
        self.discriminator = None
        if address is not None:
            self.address = address
        if time is not None:
            self.time = time
        if timezone is not None:
            self.timezone = timezone
        if authenticated is not None:
            self.authenticated = authenticated
        if username is not None:
            self.username = username
        if cloud_version is not None:
            self.cloud_version = cloud_version
        if api_version is not None:
            self.api_version = api_version
        if supported_api_versions is not None:
            self.supported_api_versions = supported_api_versions

    @property
    def address(self):
        """Gets the address of this ServerInfo.  # noqa: E501

        SUPLA Server address (to be used in smartphones)  # noqa: E501

        :return: The address of this ServerInfo.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this ServerInfo.

        SUPLA Server address (to be used in smartphones)  # noqa: E501

        :param address: The address of this ServerInfo.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def time(self):
        """Gets the time of this ServerInfo.  # noqa: E501

        Current server time  # noqa: E501

        :return: The time of this ServerInfo.  # noqa: E501
        :rtype: datetime
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this ServerInfo.

        Current server time  # noqa: E501

        :param time: The time of this ServerInfo.  # noqa: E501
        :type: datetime
        """

        self._time = time

    @property
    def timezone(self):
        """Gets the timezone of this ServerInfo.  # noqa: E501


        :return: The timezone of this ServerInfo.  # noqa: E501
        :rtype: ServerInfoTimezone
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this ServerInfo.


        :param timezone: The timezone of this ServerInfo.  # noqa: E501
        :type: ServerInfoTimezone
        """

        self._timezone = timezone

    @property
    def authenticated(self):
        """Gets the authenticated of this ServerInfo.  # noqa: E501


        :return: The authenticated of this ServerInfo.  # noqa: E501
        :rtype: bool
        """
        return self._authenticated

    @authenticated.setter
    def authenticated(self, authenticated):
        """Sets the authenticated of this ServerInfo.


        :param authenticated: The authenticated of this ServerInfo.  # noqa: E501
        :type: bool
        """

        self._authenticated = authenticated

    @property
    def username(self):
        """Gets the username of this ServerInfo.  # noqa: E501

        Present only if `authenticated=true`  # noqa: E501

        :return: The username of this ServerInfo.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this ServerInfo.

        Present only if `authenticated=true`  # noqa: E501

        :param username: The username of this ServerInfo.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def cloud_version(self):
        """Gets the cloud_version of this ServerInfo.  # noqa: E501


        :return: The cloud_version of this ServerInfo.  # noqa: E501
        :rtype: str
        """
        return self._cloud_version

    @cloud_version.setter
    def cloud_version(self, cloud_version):
        """Sets the cloud_version of this ServerInfo.


        :param cloud_version: The cloud_version of this ServerInfo.  # noqa: E501
        :type: str
        """

        self._cloud_version = cloud_version

    @property
    def api_version(self):
        """Gets the api_version of this ServerInfo.  # noqa: E501


        :return: The api_version of this ServerInfo.  # noqa: E501
        :rtype: str
        """
        return self._api_version

    @api_version.setter
    def api_version(self, api_version):
        """Sets the api_version of this ServerInfo.


        :param api_version: The api_version of this ServerInfo.  # noqa: E501
        :type: str
        """

        self._api_version = api_version

    @property
    def supported_api_versions(self):
        """Gets the supported_api_versions of this ServerInfo.  # noqa: E501


        :return: The supported_api_versions of this ServerInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._supported_api_versions

    @supported_api_versions.setter
    def supported_api_versions(self, supported_api_versions):
        """Sets the supported_api_versions of this ServerInfo.


        :param supported_api_versions: The supported_api_versions of this ServerInfo.  # noqa: E501
        :type: list[str]
        """

        self._supported_api_versions = supported_api_versions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServerInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServerInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

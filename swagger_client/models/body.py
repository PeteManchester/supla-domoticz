# coding: utf-8

"""
    SUPLA Cloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.channel_function_enum_names import ChannelFunctionEnumNames  # noqa: F401,E501


class Body(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'function': 'ChannelFunctionEnumNames',
        'source_icon': 'int',
        'image1': 'str',
        'image2': 'str',
        'image3': 'str',
        'image4': 'str'
    }

    attribute_map = {
        'function': 'function',
        'source_icon': 'sourceIcon',
        'image1': 'image1',
        'image2': 'image2',
        'image3': 'image3',
        'image4': 'image4'
    }

    def __init__(self, function=None, source_icon=None, image1=None, image2=None, image3=None, image4=None):  # noqa: E501
        """Body - a model defined in Swagger"""  # noqa: E501
        self._function = None
        self._source_icon = None
        self._image1 = None
        self._image2 = None
        self._image3 = None
        self._image4 = None
        self.discriminator = None
        if function is not None:
            self.function = function
        if source_icon is not None:
            self.source_icon = source_icon
        if image1 is not None:
            self.image1 = image1
        if image2 is not None:
            self.image2 = image2
        if image3 is not None:
            self.image3 = image3
        if image4 is not None:
            self.image4 = image4

    @property
    def function(self):
        """Gets the function of this Body.  # noqa: E501


        :return: The function of this Body.  # noqa: E501
        :rtype: ChannelFunctionEnumNames
        """
        return self._function

    @function.setter
    def function(self, function):
        """Sets the function of this Body.


        :param function: The function of this Body.  # noqa: E501
        :type: ChannelFunctionEnumNames
        """

        self._function = function

    @property
    def source_icon(self):
        """Gets the source_icon of this Body.  # noqa: E501

        ID of an existing user icon to replace with these new files. Optional.  # noqa: E501

        :return: The source_icon of this Body.  # noqa: E501
        :rtype: int
        """
        return self._source_icon

    @source_icon.setter
    def source_icon(self, source_icon):
        """Sets the source_icon of this Body.

        ID of an existing user icon to replace with these new files. Optional.  # noqa: E501

        :param source_icon: The source_icon of this Body.  # noqa: E501
        :type: int
        """

        self._source_icon = source_icon

    @property
    def image1(self):
        """Gets the image1 of this Body.  # noqa: E501


        :return: The image1 of this Body.  # noqa: E501
        :rtype: str
        """
        return self._image1

    @image1.setter
    def image1(self, image1):
        """Sets the image1 of this Body.


        :param image1: The image1 of this Body.  # noqa: E501
        :type: str
        """

        self._image1 = image1

    @property
    def image2(self):
        """Gets the image2 of this Body.  # noqa: E501


        :return: The image2 of this Body.  # noqa: E501
        :rtype: str
        """
        return self._image2

    @image2.setter
    def image2(self, image2):
        """Sets the image2 of this Body.


        :param image2: The image2 of this Body.  # noqa: E501
        :type: str
        """

        self._image2 = image2

    @property
    def image3(self):
        """Gets the image3 of this Body.  # noqa: E501


        :return: The image3 of this Body.  # noqa: E501
        :rtype: str
        """
        return self._image3

    @image3.setter
    def image3(self, image3):
        """Sets the image3 of this Body.


        :param image3: The image3 of this Body.  # noqa: E501
        :type: str
        """

        self._image3 = image3

    @property
    def image4(self):
        """Gets the image4 of this Body.  # noqa: E501


        :return: The image4 of this Body.  # noqa: E501
        :rtype: str
        """
        return self._image4

    @image4.setter
    def image4(self, image4):
        """Sets the image4 of this Body.


        :param image4: The image4 of this Body.  # noqa: E501
        :type: str
        """

        self._image4 = image4

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Body, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Body):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

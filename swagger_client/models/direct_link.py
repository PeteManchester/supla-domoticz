# coding: utf-8

"""
    SUPLA Cloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.actionable_subject_type_enum import ActionableSubjectTypeEnum  # noqa: F401,E501
from swagger_client.models.channel_function_action_enum import ChannelFunctionActionEnum  # noqa: F401,E501
from swagger_client.models.direct_link_active_date_range import DirectLinkActiveDateRange  # noqa: F401,E501


class DirectLink(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'caption': 'str',
        'executions_limit': 'int',
        'last_used': 'datetime',
        'last_ipv4': 'int',
        'enabled': 'bool',
        'disable_http_get': 'bool',
        'active_date_range': 'DirectLinkActiveDateRange',
        'slug': 'str',
        'url': 'str',
        'subject_id': 'int',
        'subject_type': 'ActionableSubjectTypeEnum',
        'allowed_actions': 'list[ChannelFunctionActionEnum]',
        'active': 'bool',
        'inactive_reason': 'str'
    }

    attribute_map = {
        'id': 'id',
        'caption': 'caption',
        'executions_limit': 'executionsLimit',
        'last_used': 'lastUsed',
        'last_ipv4': 'lastIpv4',
        'enabled': 'enabled',
        'disable_http_get': 'disableHttpGet',
        'active_date_range': 'activeDateRange',
        'slug': 'slug',
        'url': 'url',
        'subject_id': 'subjectId',
        'subject_type': 'subjectType',
        'allowed_actions': 'allowedActions',
        'active': 'active',
        'inactive_reason': 'inactiveReason'
    }

    def __init__(self, id=None, caption=None, executions_limit=None, last_used=None, last_ipv4=None, enabled=None, disable_http_get=None, active_date_range=None, slug=None, url=None, subject_id=None, subject_type=None, allowed_actions=None, active=None, inactive_reason=None):  # noqa: E501
        """DirectLink - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._caption = None
        self._executions_limit = None
        self._last_used = None
        self._last_ipv4 = None
        self._enabled = None
        self._disable_http_get = None
        self._active_date_range = None
        self._slug = None
        self._url = None
        self._subject_id = None
        self._subject_type = None
        self._allowed_actions = None
        self._active = None
        self._inactive_reason = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if caption is not None:
            self.caption = caption
        if executions_limit is not None:
            self.executions_limit = executions_limit
        if last_used is not None:
            self.last_used = last_used
        if last_ipv4 is not None:
            self.last_ipv4 = last_ipv4
        if enabled is not None:
            self.enabled = enabled
        if disable_http_get is not None:
            self.disable_http_get = disable_http_get
        if active_date_range is not None:
            self.active_date_range = active_date_range
        if slug is not None:
            self.slug = slug
        if url is not None:
            self.url = url
        if subject_id is not None:
            self.subject_id = subject_id
        if subject_type is not None:
            self.subject_type = subject_type
        if allowed_actions is not None:
            self.allowed_actions = allowed_actions
        if active is not None:
            self.active = active
        if inactive_reason is not None:
            self.inactive_reason = inactive_reason

    @property
    def id(self):
        """Gets the id of this DirectLink.  # noqa: E501

        Direct Link identifier  # noqa: E501

        :return: The id of this DirectLink.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DirectLink.

        Direct Link identifier  # noqa: E501

        :param id: The id of this DirectLink.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def caption(self):
        """Gets the caption of this DirectLink.  # noqa: E501

        Direct Link caption  # noqa: E501

        :return: The caption of this DirectLink.  # noqa: E501
        :rtype: str
        """
        return self._caption

    @caption.setter
    def caption(self, caption):
        """Sets the caption of this DirectLink.

        Direct Link caption  # noqa: E501

        :param caption: The caption of this DirectLink.  # noqa: E501
        :type: str
        """

        self._caption = caption

    @property
    def executions_limit(self):
        """Gets the executions_limit of this DirectLink.  # noqa: E501


        :return: The executions_limit of this DirectLink.  # noqa: E501
        :rtype: int
        """
        return self._executions_limit

    @executions_limit.setter
    def executions_limit(self, executions_limit):
        """Sets the executions_limit of this DirectLink.


        :param executions_limit: The executions_limit of this DirectLink.  # noqa: E501
        :type: int
        """

        self._executions_limit = executions_limit

    @property
    def last_used(self):
        """Gets the last_used of this DirectLink.  # noqa: E501


        :return: The last_used of this DirectLink.  # noqa: E501
        :rtype: datetime
        """
        return self._last_used

    @last_used.setter
    def last_used(self, last_used):
        """Sets the last_used of this DirectLink.


        :param last_used: The last_used of this DirectLink.  # noqa: E501
        :type: datetime
        """

        self._last_used = last_used

    @property
    def last_ipv4(self):
        """Gets the last_ipv4 of this DirectLink.  # noqa: E501


        :return: The last_ipv4 of this DirectLink.  # noqa: E501
        :rtype: int
        """
        return self._last_ipv4

    @last_ipv4.setter
    def last_ipv4(self, last_ipv4):
        """Sets the last_ipv4 of this DirectLink.


        :param last_ipv4: The last_ipv4 of this DirectLink.  # noqa: E501
        :type: int
        """

        self._last_ipv4 = last_ipv4

    @property
    def enabled(self):
        """Gets the enabled of this DirectLink.  # noqa: E501


        :return: The enabled of this DirectLink.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this DirectLink.


        :param enabled: The enabled of this DirectLink.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def disable_http_get(self):
        """Gets the disable_http_get of this DirectLink.  # noqa: E501


        :return: The disable_http_get of this DirectLink.  # noqa: E501
        :rtype: bool
        """
        return self._disable_http_get

    @disable_http_get.setter
    def disable_http_get(self, disable_http_get):
        """Sets the disable_http_get of this DirectLink.


        :param disable_http_get: The disable_http_get of this DirectLink.  # noqa: E501
        :type: bool
        """

        self._disable_http_get = disable_http_get

    @property
    def active_date_range(self):
        """Gets the active_date_range of this DirectLink.  # noqa: E501


        :return: The active_date_range of this DirectLink.  # noqa: E501
        :rtype: DirectLinkActiveDateRange
        """
        return self._active_date_range

    @active_date_range.setter
    def active_date_range(self, active_date_range):
        """Sets the active_date_range of this DirectLink.


        :param active_date_range: The active_date_range of this DirectLink.  # noqa: E501
        :type: DirectLinkActiveDateRange
        """

        self._active_date_range = active_date_range

    @property
    def slug(self):
        """Gets the slug of this DirectLink.  # noqa: E501

        Returned only immediately after creation  # noqa: E501

        :return: The slug of this DirectLink.  # noqa: E501
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this DirectLink.

        Returned only immediately after creation  # noqa: E501

        :param slug: The slug of this DirectLink.  # noqa: E501
        :type: str
        """

        self._slug = slug

    @property
    def url(self):
        """Gets the url of this DirectLink.  # noqa: E501

        Returned only immediately after creation  # noqa: E501

        :return: The url of this DirectLink.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this DirectLink.

        Returned only immediately after creation  # noqa: E501

        :param url: The url of this DirectLink.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def subject_id(self):
        """Gets the subject_id of this DirectLink.  # noqa: E501


        :return: The subject_id of this DirectLink.  # noqa: E501
        :rtype: int
        """
        return self._subject_id

    @subject_id.setter
    def subject_id(self, subject_id):
        """Sets the subject_id of this DirectLink.


        :param subject_id: The subject_id of this DirectLink.  # noqa: E501
        :type: int
        """

        self._subject_id = subject_id

    @property
    def subject_type(self):
        """Gets the subject_type of this DirectLink.  # noqa: E501


        :return: The subject_type of this DirectLink.  # noqa: E501
        :rtype: ActionableSubjectTypeEnum
        """
        return self._subject_type

    @subject_type.setter
    def subject_type(self, subject_type):
        """Sets the subject_type of this DirectLink.


        :param subject_type: The subject_type of this DirectLink.  # noqa: E501
        :type: ActionableSubjectTypeEnum
        """

        self._subject_type = subject_type

    @property
    def allowed_actions(self):
        """Gets the allowed_actions of this DirectLink.  # noqa: E501


        :return: The allowed_actions of this DirectLink.  # noqa: E501
        :rtype: list[ChannelFunctionActionEnum]
        """
        return self._allowed_actions

    @allowed_actions.setter
    def allowed_actions(self, allowed_actions):
        """Sets the allowed_actions of this DirectLink.


        :param allowed_actions: The allowed_actions of this DirectLink.  # noqa: E501
        :type: list[ChannelFunctionActionEnum]
        """

        self._allowed_actions = allowed_actions

    @property
    def active(self):
        """Gets the active of this DirectLink.  # noqa: E501


        :return: The active of this DirectLink.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this DirectLink.


        :param active: The active of this DirectLink.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def inactive_reason(self):
        """Gets the inactive_reason of this DirectLink.  # noqa: E501

        Returned only if active is `false`  # noqa: E501

        :return: The inactive_reason of this DirectLink.  # noqa: E501
        :rtype: str
        """
        return self._inactive_reason

    @inactive_reason.setter
    def inactive_reason(self, inactive_reason):
        """Sets the inactive_reason of this DirectLink.

        Returned only if active is `false`  # noqa: E501

        :param inactive_reason: The inactive_reason of this DirectLink.  # noqa: E501
        :type: str
        """

        self._inactive_reason = inactive_reason

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DirectLink, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DirectLink):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    SUPLA Cloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.object import Object  # noqa: F401,E501


class ScheduleRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'channel_id': 'int',
        'action_id': 'int',
        'mode': 'str',
        'time_expression': 'str',
        'action_param': 'Object',
        'date_start': 'datetime',
        'date_end': 'datetime',
        'caption': 'str',
        'retry': 'bool'
    }

    attribute_map = {
        'channel_id': 'channelId',
        'action_id': 'actionId',
        'mode': 'mode',
        'time_expression': 'timeExpression',
        'action_param': 'actionParam',
        'date_start': 'dateStart',
        'date_end': 'dateEnd',
        'caption': 'caption',
        'retry': 'retry'
    }

    def __init__(self, channel_id=None, action_id=None, mode=None, time_expression=None, action_param=None, date_start=None, date_end=None, caption=None, retry=None):  # noqa: E501
        """ScheduleRequest - a model defined in Swagger"""  # noqa: E501
        self._channel_id = None
        self._action_id = None
        self._mode = None
        self._time_expression = None
        self._action_param = None
        self._date_start = None
        self._date_end = None
        self._caption = None
        self._retry = None
        self.discriminator = None
        self.channel_id = channel_id
        self.action_id = action_id
        self.mode = mode
        self.time_expression = time_expression
        if action_param is not None:
            self.action_param = action_param
        if date_start is not None:
            self.date_start = date_start
        if date_end is not None:
            self.date_end = date_end
        if caption is not None:
            self.caption = caption
        if retry is not None:
            self.retry = retry

    @property
    def channel_id(self):
        """Gets the channel_id of this ScheduleRequest.  # noqa: E501


        :return: The channel_id of this ScheduleRequest.  # noqa: E501
        :rtype: int
        """
        return self._channel_id

    @channel_id.setter
    def channel_id(self, channel_id):
        """Sets the channel_id of this ScheduleRequest.


        :param channel_id: The channel_id of this ScheduleRequest.  # noqa: E501
        :type: int
        """
        if channel_id is None:
            raise ValueError("Invalid value for `channel_id`, must not be `None`")  # noqa: E501

        self._channel_id = channel_id

    @property
    def action_id(self):
        """Gets the action_id of this ScheduleRequest.  # noqa: E501


        :return: The action_id of this ScheduleRequest.  # noqa: E501
        :rtype: int
        """
        return self._action_id

    @action_id.setter
    def action_id(self, action_id):
        """Sets the action_id of this ScheduleRequest.


        :param action_id: The action_id of this ScheduleRequest.  # noqa: E501
        :type: int
        """
        if action_id is None:
            raise ValueError("Invalid value for `action_id`, must not be `None`")  # noqa: E501

        self._action_id = action_id

    @property
    def mode(self):
        """Gets the mode of this ScheduleRequest.  # noqa: E501


        :return: The mode of this ScheduleRequest.  # noqa: E501
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this ScheduleRequest.


        :param mode: The mode of this ScheduleRequest.  # noqa: E501
        :type: str
        """
        if mode is None:
            raise ValueError("Invalid value for `mode`, must not be `None`")  # noqa: E501
        allowed_values = ["once", "minutely", "daily", "hourly"]  # noqa: E501
        if mode not in allowed_values:
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"  # noqa: E501
                .format(mode, allowed_values)
            )

        self._mode = mode

    @property
    def time_expression(self):
        """Gets the time_expression of this ScheduleRequest.  # noqa: E501

        Schedule time expression in crontab notation (with some custom additions).  # noqa: E501

        :return: The time_expression of this ScheduleRequest.  # noqa: E501
        :rtype: str
        """
        return self._time_expression

    @time_expression.setter
    def time_expression(self, time_expression):
        """Sets the time_expression of this ScheduleRequest.

        Schedule time expression in crontab notation (with some custom additions).  # noqa: E501

        :param time_expression: The time_expression of this ScheduleRequest.  # noqa: E501
        :type: str
        """
        if time_expression is None:
            raise ValueError("Invalid value for `time_expression`, must not be `None`")  # noqa: E501

        self._time_expression = time_expression

    @property
    def action_param(self):
        """Gets the action_param of this ScheduleRequest.  # noqa: E501


        :return: The action_param of this ScheduleRequest.  # noqa: E501
        :rtype: Object
        """
        return self._action_param

    @action_param.setter
    def action_param(self, action_param):
        """Sets the action_param of this ScheduleRequest.


        :param action_param: The action_param of this ScheduleRequest.  # noqa: E501
        :type: Object
        """

        self._action_param = action_param

    @property
    def date_start(self):
        """Gets the date_start of this ScheduleRequest.  # noqa: E501


        :return: The date_start of this ScheduleRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._date_start

    @date_start.setter
    def date_start(self, date_start):
        """Sets the date_start of this ScheduleRequest.


        :param date_start: The date_start of this ScheduleRequest.  # noqa: E501
        :type: datetime
        """

        self._date_start = date_start

    @property
    def date_end(self):
        """Gets the date_end of this ScheduleRequest.  # noqa: E501


        :return: The date_end of this ScheduleRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._date_end

    @date_end.setter
    def date_end(self, date_end):
        """Sets the date_end of this ScheduleRequest.


        :param date_end: The date_end of this ScheduleRequest.  # noqa: E501
        :type: datetime
        """

        self._date_end = date_end

    @property
    def caption(self):
        """Gets the caption of this ScheduleRequest.  # noqa: E501


        :return: The caption of this ScheduleRequest.  # noqa: E501
        :rtype: str
        """
        return self._caption

    @caption.setter
    def caption(self, caption):
        """Sets the caption of this ScheduleRequest.


        :param caption: The caption of this ScheduleRequest.  # noqa: E501
        :type: str
        """

        self._caption = caption

    @property
    def retry(self):
        """Gets the retry of this ScheduleRequest.  # noqa: E501


        :return: The retry of this ScheduleRequest.  # noqa: E501
        :rtype: bool
        """
        return self._retry

    @retry.setter
    def retry(self, retry):
        """Sets the retry of this ScheduleRequest.


        :param retry: The retry of this ScheduleRequest.  # noqa: E501
        :type: bool
        """

        self._retry = retry

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ScheduleRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScheduleRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

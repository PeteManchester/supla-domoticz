# coding: utf-8

"""
    SUPLA Cloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.access_identifier import AccessIdentifier  # noqa: F401,E501


class ClientApp(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'caption': 'str',
        'enabled': 'bool',
        'reg_ipv4': 'int',
        'reg_date': 'datetime',
        'last_access_ipv4': 'int',
        'last_access_date': 'datetime',
        'software_version': 'str',
        'protocol_version': 'int',
        'access_id_id': 'int',
        'connected': 'bool',
        'access_id': 'AccessIdentifier'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'caption': 'caption',
        'enabled': 'enabled',
        'reg_ipv4': 'regIpv4',
        'reg_date': 'regDate',
        'last_access_ipv4': 'lastAccessIpv4',
        'last_access_date': 'lastAccessDate',
        'software_version': 'softwareVersion',
        'protocol_version': 'protocolVersion',
        'access_id_id': 'accessIdId',
        'connected': 'connected',
        'access_id': 'accessId'
    }

    def __init__(self, id=None, name=None, caption=None, enabled=None, reg_ipv4=None, reg_date=None, last_access_ipv4=None, last_access_date=None, software_version=None, protocol_version=None, access_id_id=None, connected=None, access_id=None):  # noqa: E501
        """ClientApp - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._caption = None
        self._enabled = None
        self._reg_ipv4 = None
        self._reg_date = None
        self._last_access_ipv4 = None
        self._last_access_date = None
        self._software_version = None
        self._protocol_version = None
        self._access_id_id = None
        self._connected = None
        self._access_id = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if caption is not None:
            self.caption = caption
        if enabled is not None:
            self.enabled = enabled
        if reg_ipv4 is not None:
            self.reg_ipv4 = reg_ipv4
        if reg_date is not None:
            self.reg_date = reg_date
        if last_access_ipv4 is not None:
            self.last_access_ipv4 = last_access_ipv4
        if last_access_date is not None:
            self.last_access_date = last_access_date
        if software_version is not None:
            self.software_version = software_version
        if protocol_version is not None:
            self.protocol_version = protocol_version
        if access_id_id is not None:
            self.access_id_id = access_id_id
        if connected is not None:
            self.connected = connected
        if access_id is not None:
            self.access_id = access_id

    @property
    def id(self):
        """Gets the id of this ClientApp.  # noqa: E501

        Client application identifier  # noqa: E501

        :return: The id of this ClientApp.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ClientApp.

        Client application identifier  # noqa: E501

        :param id: The id of this ClientApp.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ClientApp.  # noqa: E501


        :return: The name of this ClientApp.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ClientApp.


        :param name: The name of this ClientApp.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def caption(self):
        """Gets the caption of this ClientApp.  # noqa: E501


        :return: The caption of this ClientApp.  # noqa: E501
        :rtype: str
        """
        return self._caption

    @caption.setter
    def caption(self, caption):
        """Sets the caption of this ClientApp.


        :param caption: The caption of this ClientApp.  # noqa: E501
        :type: str
        """

        self._caption = caption

    @property
    def enabled(self):
        """Gets the enabled of this ClientApp.  # noqa: E501


        :return: The enabled of this ClientApp.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this ClientApp.


        :param enabled: The enabled of this ClientApp.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def reg_ipv4(self):
        """Gets the reg_ipv4 of this ClientApp.  # noqa: E501


        :return: The reg_ipv4 of this ClientApp.  # noqa: E501
        :rtype: int
        """
        return self._reg_ipv4

    @reg_ipv4.setter
    def reg_ipv4(self, reg_ipv4):
        """Sets the reg_ipv4 of this ClientApp.


        :param reg_ipv4: The reg_ipv4 of this ClientApp.  # noqa: E501
        :type: int
        """

        self._reg_ipv4 = reg_ipv4

    @property
    def reg_date(self):
        """Gets the reg_date of this ClientApp.  # noqa: E501


        :return: The reg_date of this ClientApp.  # noqa: E501
        :rtype: datetime
        """
        return self._reg_date

    @reg_date.setter
    def reg_date(self, reg_date):
        """Sets the reg_date of this ClientApp.


        :param reg_date: The reg_date of this ClientApp.  # noqa: E501
        :type: datetime
        """

        self._reg_date = reg_date

    @property
    def last_access_ipv4(self):
        """Gets the last_access_ipv4 of this ClientApp.  # noqa: E501


        :return: The last_access_ipv4 of this ClientApp.  # noqa: E501
        :rtype: int
        """
        return self._last_access_ipv4

    @last_access_ipv4.setter
    def last_access_ipv4(self, last_access_ipv4):
        """Sets the last_access_ipv4 of this ClientApp.


        :param last_access_ipv4: The last_access_ipv4 of this ClientApp.  # noqa: E501
        :type: int
        """

        self._last_access_ipv4 = last_access_ipv4

    @property
    def last_access_date(self):
        """Gets the last_access_date of this ClientApp.  # noqa: E501


        :return: The last_access_date of this ClientApp.  # noqa: E501
        :rtype: datetime
        """
        return self._last_access_date

    @last_access_date.setter
    def last_access_date(self, last_access_date):
        """Sets the last_access_date of this ClientApp.


        :param last_access_date: The last_access_date of this ClientApp.  # noqa: E501
        :type: datetime
        """

        self._last_access_date = last_access_date

    @property
    def software_version(self):
        """Gets the software_version of this ClientApp.  # noqa: E501


        :return: The software_version of this ClientApp.  # noqa: E501
        :rtype: str
        """
        return self._software_version

    @software_version.setter
    def software_version(self, software_version):
        """Sets the software_version of this ClientApp.


        :param software_version: The software_version of this ClientApp.  # noqa: E501
        :type: str
        """

        self._software_version = software_version

    @property
    def protocol_version(self):
        """Gets the protocol_version of this ClientApp.  # noqa: E501


        :return: The protocol_version of this ClientApp.  # noqa: E501
        :rtype: int
        """
        return self._protocol_version

    @protocol_version.setter
    def protocol_version(self, protocol_version):
        """Sets the protocol_version of this ClientApp.


        :param protocol_version: The protocol_version of this ClientApp.  # noqa: E501
        :type: int
        """

        self._protocol_version = protocol_version

    @property
    def access_id_id(self):
        """Gets the access_id_id of this ClientApp.  # noqa: E501


        :return: The access_id_id of this ClientApp.  # noqa: E501
        :rtype: int
        """
        return self._access_id_id

    @access_id_id.setter
    def access_id_id(self, access_id_id):
        """Sets the access_id_id of this ClientApp.


        :param access_id_id: The access_id_id of this ClientApp.  # noqa: E501
        :type: int
        """

        self._access_id_id = access_id_id

    @property
    def connected(self):
        """Gets the connected of this ClientApp.  # noqa: E501


        :return: The connected of this ClientApp.  # noqa: E501
        :rtype: bool
        """
        return self._connected

    @connected.setter
    def connected(self, connected):
        """Sets the connected of this ClientApp.


        :param connected: The connected of this ClientApp.  # noqa: E501
        :type: bool
        """

        self._connected = connected

    @property
    def access_id(self):
        """Gets the access_id of this ClientApp.  # noqa: E501


        :return: The access_id of this ClientApp.  # noqa: E501
        :rtype: AccessIdentifier
        """
        return self._access_id

    @access_id.setter
    def access_id(self, access_id):
        """Sets the access_id of this ClientApp.


        :param access_id: The access_id of this ClientApp.  # noqa: E501
        :type: AccessIdentifier
        """

        self._access_id = access_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClientApp, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClientApp):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    SUPLA Cloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.channel import Channel  # noqa: F401,E501
from swagger_client.models.location import Location  # noqa: F401,E501
from swagger_client.models.schedule import Schedule  # noqa: F401,E501


class Device(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'enabled': 'bool',
        'comment': 'str',
        'reg_date': 'datetime',
        'reg_ipv4': 'int',
        'last_connected': 'datetime',
        'last_ipv4': 'int',
        'software_version': 'str',
        'g_uid_string': 'str',
        'location_id': 'int',
        'original_location_id': 'int',
        'channels_ids': 'list[int]',
        'connected': 'bool',
        'location': 'Location',
        'original_location': 'Location',
        'channels': 'list[Channel]',
        'schedules': 'list[Schedule]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'enabled': 'enabled',
        'comment': 'comment',
        'reg_date': 'regDate',
        'reg_ipv4': 'regIpv4',
        'last_connected': 'lastConnected',
        'last_ipv4': 'lastIpv4',
        'software_version': 'softwareVersion',
        'g_uid_string': 'gUIDString',
        'location_id': 'locationId',
        'original_location_id': 'originalLocationId',
        'channels_ids': 'channelsIds',
        'connected': 'connected',
        'location': 'location',
        'original_location': 'originalLocation',
        'channels': 'channels',
        'schedules': 'schedules'
    }

    def __init__(self, id=None, name=None, enabled=None, comment=None, reg_date=None, reg_ipv4=None, last_connected=None, last_ipv4=None, software_version=None, g_uid_string=None, location_id=None, original_location_id=None, channels_ids=None, connected=None, location=None, original_location=None, channels=None, schedules=None):  # noqa: E501
        """Device - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._enabled = None
        self._comment = None
        self._reg_date = None
        self._reg_ipv4 = None
        self._last_connected = None
        self._last_ipv4 = None
        self._software_version = None
        self._g_uid_string = None
        self._location_id = None
        self._original_location_id = None
        self._channels_ids = None
        self._connected = None
        self._location = None
        self._original_location = None
        self._channels = None
        self._schedules = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if enabled is not None:
            self.enabled = enabled
        if comment is not None:
            self.comment = comment
        if reg_date is not None:
            self.reg_date = reg_date
        if reg_ipv4 is not None:
            self.reg_ipv4 = reg_ipv4
        if last_connected is not None:
            self.last_connected = last_connected
        if last_ipv4 is not None:
            self.last_ipv4 = last_ipv4
        if software_version is not None:
            self.software_version = software_version
        if g_uid_string is not None:
            self.g_uid_string = g_uid_string
        if location_id is not None:
            self.location_id = location_id
        if original_location_id is not None:
            self.original_location_id = original_location_id
        if channels_ids is not None:
            self.channels_ids = channels_ids
        if connected is not None:
            self.connected = connected
        if location is not None:
            self.location = location
        if original_location is not None:
            self.original_location = original_location
        if channels is not None:
            self.channels = channels
        if schedules is not None:
            self.schedules = schedules

    @property
    def id(self):
        """Gets the id of this Device.  # noqa: E501

        Device identifier  # noqa: E501

        :return: The id of this Device.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Device.

        Device identifier  # noqa: E501

        :param id: The id of this Device.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Device.  # noqa: E501


        :return: The name of this Device.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Device.


        :param name: The name of this Device.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def enabled(self):
        """Gets the enabled of this Device.  # noqa: E501


        :return: The enabled of this Device.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this Device.


        :param enabled: The enabled of this Device.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def comment(self):
        """Gets the comment of this Device.  # noqa: E501


        :return: The comment of this Device.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this Device.


        :param comment: The comment of this Device.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def reg_date(self):
        """Gets the reg_date of this Device.  # noqa: E501


        :return: The reg_date of this Device.  # noqa: E501
        :rtype: datetime
        """
        return self._reg_date

    @reg_date.setter
    def reg_date(self, reg_date):
        """Sets the reg_date of this Device.


        :param reg_date: The reg_date of this Device.  # noqa: E501
        :type: datetime
        """

        self._reg_date = reg_date

    @property
    def reg_ipv4(self):
        """Gets the reg_ipv4 of this Device.  # noqa: E501


        :return: The reg_ipv4 of this Device.  # noqa: E501
        :rtype: int
        """
        return self._reg_ipv4

    @reg_ipv4.setter
    def reg_ipv4(self, reg_ipv4):
        """Sets the reg_ipv4 of this Device.


        :param reg_ipv4: The reg_ipv4 of this Device.  # noqa: E501
        :type: int
        """

        self._reg_ipv4 = reg_ipv4

    @property
    def last_connected(self):
        """Gets the last_connected of this Device.  # noqa: E501


        :return: The last_connected of this Device.  # noqa: E501
        :rtype: datetime
        """
        return self._last_connected

    @last_connected.setter
    def last_connected(self, last_connected):
        """Sets the last_connected of this Device.


        :param last_connected: The last_connected of this Device.  # noqa: E501
        :type: datetime
        """

        self._last_connected = last_connected

    @property
    def last_ipv4(self):
        """Gets the last_ipv4 of this Device.  # noqa: E501


        :return: The last_ipv4 of this Device.  # noqa: E501
        :rtype: int
        """
        return self._last_ipv4

    @last_ipv4.setter
    def last_ipv4(self, last_ipv4):
        """Sets the last_ipv4 of this Device.


        :param last_ipv4: The last_ipv4 of this Device.  # noqa: E501
        :type: int
        """

        self._last_ipv4 = last_ipv4

    @property
    def software_version(self):
        """Gets the software_version of this Device.  # noqa: E501


        :return: The software_version of this Device.  # noqa: E501
        :rtype: str
        """
        return self._software_version

    @software_version.setter
    def software_version(self, software_version):
        """Sets the software_version of this Device.


        :param software_version: The software_version of this Device.  # noqa: E501
        :type: str
        """

        self._software_version = software_version

    @property
    def g_uid_string(self):
        """Gets the g_uid_string of this Device.  # noqa: E501


        :return: The g_uid_string of this Device.  # noqa: E501
        :rtype: str
        """
        return self._g_uid_string

    @g_uid_string.setter
    def g_uid_string(self, g_uid_string):
        """Sets the g_uid_string of this Device.


        :param g_uid_string: The g_uid_string of this Device.  # noqa: E501
        :type: str
        """

        self._g_uid_string = g_uid_string

    @property
    def location_id(self):
        """Gets the location_id of this Device.  # noqa: E501


        :return: The location_id of this Device.  # noqa: E501
        :rtype: int
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this Device.


        :param location_id: The location_id of this Device.  # noqa: E501
        :type: int
        """

        self._location_id = location_id

    @property
    def original_location_id(self):
        """Gets the original_location_id of this Device.  # noqa: E501


        :return: The original_location_id of this Device.  # noqa: E501
        :rtype: int
        """
        return self._original_location_id

    @original_location_id.setter
    def original_location_id(self, original_location_id):
        """Sets the original_location_id of this Device.


        :param original_location_id: The original_location_id of this Device.  # noqa: E501
        :type: int
        """

        self._original_location_id = original_location_id

    @property
    def channels_ids(self):
        """Gets the channels_ids of this Device.  # noqa: E501


        :return: The channels_ids of this Device.  # noqa: E501
        :rtype: list[int]
        """
        return self._channels_ids

    @channels_ids.setter
    def channels_ids(self, channels_ids):
        """Sets the channels_ids of this Device.


        :param channels_ids: The channels_ids of this Device.  # noqa: E501
        :type: list[int]
        """

        self._channels_ids = channels_ids

    @property
    def connected(self):
        """Gets the connected of this Device.  # noqa: E501


        :return: The connected of this Device.  # noqa: E501
        :rtype: bool
        """
        return self._connected

    @connected.setter
    def connected(self, connected):
        """Sets the connected of this Device.


        :param connected: The connected of this Device.  # noqa: E501
        :type: bool
        """

        self._connected = connected

    @property
    def location(self):
        """Gets the location of this Device.  # noqa: E501


        :return: The location of this Device.  # noqa: E501
        :rtype: Location
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Device.


        :param location: The location of this Device.  # noqa: E501
        :type: Location
        """

        self._location = location

    @property
    def original_location(self):
        """Gets the original_location of this Device.  # noqa: E501


        :return: The original_location of this Device.  # noqa: E501
        :rtype: Location
        """
        return self._original_location

    @original_location.setter
    def original_location(self, original_location):
        """Sets the original_location of this Device.


        :param original_location: The original_location of this Device.  # noqa: E501
        :type: Location
        """

        self._original_location = original_location

    @property
    def channels(self):
        """Gets the channels of this Device.  # noqa: E501

        Returned only if requested by the `include` parameter.  # noqa: E501

        :return: The channels of this Device.  # noqa: E501
        :rtype: list[Channel]
        """
        return self._channels

    @channels.setter
    def channels(self, channels):
        """Sets the channels of this Device.

        Returned only if requested by the `include` parameter.  # noqa: E501

        :param channels: The channels of this Device.  # noqa: E501
        :type: list[Channel]
        """

        self._channels = channels

    @property
    def schedules(self):
        """Gets the schedules of this Device.  # noqa: E501

        Returned only if requested by the `include` parameter.  # noqa: E501

        :return: The schedules of this Device.  # noqa: E501
        :rtype: list[Schedule]
        """
        return self._schedules

    @schedules.setter
    def schedules(self, schedules):
        """Sets the schedules of this Device.

        Returned only if requested by the `include` parameter.  # noqa: E501

        :param schedules: The schedules of this Device.  # noqa: E501
        :type: list[Schedule]
        """

        self._schedules = schedules

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Device, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Device):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

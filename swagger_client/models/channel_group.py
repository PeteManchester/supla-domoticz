# coding: utf-8

"""
    SUPLA Cloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.channel import Channel  # noqa: F401,E501
from swagger_client.models.channel_function import ChannelFunction  # noqa: F401,E501
from swagger_client.models.location import Location  # noqa: F401,E501


class ChannelGroup(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'hidden': 'bool',
        'caption': 'str',
        'function': 'ChannelFunction',
        'function_id': 'int',
        'user_icon_id': 'int',
        'location_id': 'int',
        'location': 'Location',
        'channel_ids': 'list[int]',
        'channels': 'list[Channel]',
        'alt_icon': 'int'
    }

    attribute_map = {
        'id': 'id',
        'hidden': 'hidden',
        'caption': 'caption',
        'function': 'function',
        'function_id': 'functionId',
        'user_icon_id': 'userIconId',
        'location_id': 'locationId',
        'location': 'location',
        'channel_ids': 'channelIds',
        'channels': 'channels',
        'alt_icon': 'altIcon'
    }

    def __init__(self, id=None, hidden=None, caption=None, function=None, function_id=None, user_icon_id=None, location_id=None, location=None, channel_ids=None, channels=None, alt_icon=None):  # noqa: E501
        """ChannelGroup - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._hidden = None
        self._caption = None
        self._function = None
        self._function_id = None
        self._user_icon_id = None
        self._location_id = None
        self._location = None
        self._channel_ids = None
        self._channels = None
        self._alt_icon = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if hidden is not None:
            self.hidden = hidden
        if caption is not None:
            self.caption = caption
        if function is not None:
            self.function = function
        if function_id is not None:
            self.function_id = function_id
        if user_icon_id is not None:
            self.user_icon_id = user_icon_id
        if location_id is not None:
            self.location_id = location_id
        if location is not None:
            self.location = location
        if channel_ids is not None:
            self.channel_ids = channel_ids
        if channels is not None:
            self.channels = channels
        if alt_icon is not None:
            self.alt_icon = alt_icon

    @property
    def id(self):
        """Gets the id of this ChannelGroup.  # noqa: E501

        Channel group identifier  # noqa: E501

        :return: The id of this ChannelGroup.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ChannelGroup.

        Channel group identifier  # noqa: E501

        :param id: The id of this ChannelGroup.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def hidden(self):
        """Gets the hidden of this ChannelGroup.  # noqa: E501

        Whether this channel group is shown on client apps or not  # noqa: E501

        :return: The hidden of this ChannelGroup.  # noqa: E501
        :rtype: bool
        """
        return self._hidden

    @hidden.setter
    def hidden(self, hidden):
        """Sets the hidden of this ChannelGroup.

        Whether this channel group is shown on client apps or not  # noqa: E501

        :param hidden: The hidden of this ChannelGroup.  # noqa: E501
        :type: bool
        """

        self._hidden = hidden

    @property
    def caption(self):
        """Gets the caption of this ChannelGroup.  # noqa: E501

        Channel caption  # noqa: E501

        :return: The caption of this ChannelGroup.  # noqa: E501
        :rtype: str
        """
        return self._caption

    @caption.setter
    def caption(self, caption):
        """Sets the caption of this ChannelGroup.

        Channel caption  # noqa: E501

        :param caption: The caption of this ChannelGroup.  # noqa: E501
        :type: str
        """

        self._caption = caption

    @property
    def function(self):
        """Gets the function of this ChannelGroup.  # noqa: E501


        :return: The function of this ChannelGroup.  # noqa: E501
        :rtype: ChannelFunction
        """
        return self._function

    @function.setter
    def function(self, function):
        """Sets the function of this ChannelGroup.


        :param function: The function of this ChannelGroup.  # noqa: E501
        :type: ChannelFunction
        """

        self._function = function

    @property
    def function_id(self):
        """Gets the function_id of this ChannelGroup.  # noqa: E501


        :return: The function_id of this ChannelGroup.  # noqa: E501
        :rtype: int
        """
        return self._function_id

    @function_id.setter
    def function_id(self, function_id):
        """Sets the function_id of this ChannelGroup.


        :param function_id: The function_id of this ChannelGroup.  # noqa: E501
        :type: int
        """

        self._function_id = function_id

    @property
    def user_icon_id(self):
        """Gets the user_icon_id of this ChannelGroup.  # noqa: E501


        :return: The user_icon_id of this ChannelGroup.  # noqa: E501
        :rtype: int
        """
        return self._user_icon_id

    @user_icon_id.setter
    def user_icon_id(self, user_icon_id):
        """Sets the user_icon_id of this ChannelGroup.


        :param user_icon_id: The user_icon_id of this ChannelGroup.  # noqa: E501
        :type: int
        """

        self._user_icon_id = user_icon_id

    @property
    def location_id(self):
        """Gets the location_id of this ChannelGroup.  # noqa: E501


        :return: The location_id of this ChannelGroup.  # noqa: E501
        :rtype: int
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this ChannelGroup.


        :param location_id: The location_id of this ChannelGroup.  # noqa: E501
        :type: int
        """

        self._location_id = location_id

    @property
    def location(self):
        """Gets the location of this ChannelGroup.  # noqa: E501


        :return: The location of this ChannelGroup.  # noqa: E501
        :rtype: Location
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this ChannelGroup.


        :param location: The location of this ChannelGroup.  # noqa: E501
        :type: Location
        """

        self._location = location

    @property
    def channel_ids(self):
        """Gets the channel_ids of this ChannelGroup.  # noqa: E501


        :return: The channel_ids of this ChannelGroup.  # noqa: E501
        :rtype: list[int]
        """
        return self._channel_ids

    @channel_ids.setter
    def channel_ids(self, channel_ids):
        """Sets the channel_ids of this ChannelGroup.


        :param channel_ids: The channel_ids of this ChannelGroup.  # noqa: E501
        :type: list[int]
        """

        self._channel_ids = channel_ids

    @property
    def channels(self):
        """Gets the channels of this ChannelGroup.  # noqa: E501

        Returned only if requested by the `include` parameter.  # noqa: E501

        :return: The channels of this ChannelGroup.  # noqa: E501
        :rtype: list[Channel]
        """
        return self._channels

    @channels.setter
    def channels(self, channels):
        """Sets the channels of this ChannelGroup.

        Returned only if requested by the `include` parameter.  # noqa: E501

        :param channels: The channels of this ChannelGroup.  # noqa: E501
        :type: list[Channel]
        """

        self._channels = channels

    @property
    def alt_icon(self):
        """Gets the alt_icon of this ChannelGroup.  # noqa: E501

        Chosen alternative icon idenifier. Should not be greater than `funciton.maxAlternativeIconIndex`  # noqa: E501

        :return: The alt_icon of this ChannelGroup.  # noqa: E501
        :rtype: int
        """
        return self._alt_icon

    @alt_icon.setter
    def alt_icon(self, alt_icon):
        """Sets the alt_icon of this ChannelGroup.

        Chosen alternative icon idenifier. Should not be greater than `funciton.maxAlternativeIconIndex`  # noqa: E501

        :param alt_icon: The alt_icon of this ChannelGroup.  # noqa: E501
        :type: int
        """

        self._alt_icon = alt_icon

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ChannelGroup, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChannelGroup):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

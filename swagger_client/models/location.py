# coding: utf-8

"""
    SUPLA Cloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.access_identifier import AccessIdentifier  # noqa: F401,E501
from swagger_client.models.channel import Channel  # noqa: F401,E501
from swagger_client.models.channel_group import ChannelGroup  # noqa: F401,E501
from swagger_client.models.device import Device  # noqa: F401,E501


class Location(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'caption': 'str',
        'enabled': 'bool',
        'iodevices_ids': 'list[int]',
        'channel_groups_ids': 'list[int]',
        'channels_ids': 'list[int]',
        'access_ids_ids': 'list[int]',
        'password': 'str',
        'iodevices': 'list[Device]',
        'channel_groups': 'list[ChannelGroup]',
        'access_ids': 'list[AccessIdentifier]',
        'channels': 'list[Channel]'
    }

    attribute_map = {
        'id': 'id',
        'caption': 'caption',
        'enabled': 'enabled',
        'iodevices_ids': 'iodevicesIds',
        'channel_groups_ids': 'channelGroupsIds',
        'channels_ids': 'channelsIds',
        'access_ids_ids': 'accessIdsIds',
        'password': 'password',
        'iodevices': 'iodevices',
        'channel_groups': 'channelGroups',
        'access_ids': 'accessIds',
        'channels': 'channels'
    }

    def __init__(self, id=None, caption=None, enabled=None, iodevices_ids=None, channel_groups_ids=None, channels_ids=None, access_ids_ids=None, password=None, iodevices=None, channel_groups=None, access_ids=None, channels=None):  # noqa: E501
        """Location - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._caption = None
        self._enabled = None
        self._iodevices_ids = None
        self._channel_groups_ids = None
        self._channels_ids = None
        self._access_ids_ids = None
        self._password = None
        self._iodevices = None
        self._channel_groups = None
        self._access_ids = None
        self._channels = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if caption is not None:
            self.caption = caption
        if enabled is not None:
            self.enabled = enabled
        if iodevices_ids is not None:
            self.iodevices_ids = iodevices_ids
        if channel_groups_ids is not None:
            self.channel_groups_ids = channel_groups_ids
        if channels_ids is not None:
            self.channels_ids = channels_ids
        if access_ids_ids is not None:
            self.access_ids_ids = access_ids_ids
        if password is not None:
            self.password = password
        if iodevices is not None:
            self.iodevices = iodevices
        if channel_groups is not None:
            self.channel_groups = channel_groups
        if access_ids is not None:
            self.access_ids = access_ids
        if channels is not None:
            self.channels = channels

    @property
    def id(self):
        """Gets the id of this Location.  # noqa: E501

        Location identifier  # noqa: E501

        :return: The id of this Location.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Location.

        Location identifier  # noqa: E501

        :param id: The id of this Location.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def caption(self):
        """Gets the caption of this Location.  # noqa: E501

        Location caption  # noqa: E501

        :return: The caption of this Location.  # noqa: E501
        :rtype: str
        """
        return self._caption

    @caption.setter
    def caption(self, caption):
        """Sets the caption of this Location.

        Location caption  # noqa: E501

        :param caption: The caption of this Location.  # noqa: E501
        :type: str
        """

        self._caption = caption

    @property
    def enabled(self):
        """Gets the enabled of this Location.  # noqa: E501

        `true` if the location is enabled, `false` otherwise  # noqa: E501

        :return: The enabled of this Location.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this Location.

        `true` if the location is enabled, `false` otherwise  # noqa: E501

        :param enabled: The enabled of this Location.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def iodevices_ids(self):
        """Gets the iodevices_ids of this Location.  # noqa: E501

        array containing the IO Devices identifiers assigned to this location  # noqa: E501

        :return: The iodevices_ids of this Location.  # noqa: E501
        :rtype: list[int]
        """
        return self._iodevices_ids

    @iodevices_ids.setter
    def iodevices_ids(self, iodevices_ids):
        """Sets the iodevices_ids of this Location.

        array containing the IO Devices identifiers assigned to this location  # noqa: E501

        :param iodevices_ids: The iodevices_ids of this Location.  # noqa: E501
        :type: list[int]
        """

        self._iodevices_ids = iodevices_ids

    @property
    def channel_groups_ids(self):
        """Gets the channel_groups_ids of this Location.  # noqa: E501

        array containing the Channel groups identifiers assigned to this location  # noqa: E501

        :return: The channel_groups_ids of this Location.  # noqa: E501
        :rtype: list[int]
        """
        return self._channel_groups_ids

    @channel_groups_ids.setter
    def channel_groups_ids(self, channel_groups_ids):
        """Sets the channel_groups_ids of this Location.

        array containing the Channel groups identifiers assigned to this location  # noqa: E501

        :param channel_groups_ids: The channel_groups_ids of this Location.  # noqa: E501
        :type: list[int]
        """

        self._channel_groups_ids = channel_groups_ids

    @property
    def channels_ids(self):
        """Gets the channels_ids of this Location.  # noqa: E501

        array containing the Channels identifiers expicitely assigned to this location  # noqa: E501

        :return: The channels_ids of this Location.  # noqa: E501
        :rtype: list[int]
        """
        return self._channels_ids

    @channels_ids.setter
    def channels_ids(self, channels_ids):
        """Sets the channels_ids of this Location.

        array containing the Channels identifiers expicitely assigned to this location  # noqa: E501

        :param channels_ids: The channels_ids of this Location.  # noqa: E501
        :type: list[int]
        """

        self._channels_ids = channels_ids

    @property
    def access_ids_ids(self):
        """Gets the access_ids_ids of this Location.  # noqa: E501

        array containing the Access Identifiers identifiers assigned to this location  # noqa: E501

        :return: The access_ids_ids of this Location.  # noqa: E501
        :rtype: list[int]
        """
        return self._access_ids_ids

    @access_ids_ids.setter
    def access_ids_ids(self, access_ids_ids):
        """Sets the access_ids_ids of this Location.

        array containing the Access Identifiers identifiers assigned to this location  # noqa: E501

        :param access_ids_ids: The access_ids_ids of this Location.  # noqa: E501
        :type: list[int]
        """

        self._access_ids_ids = access_ids_ids

    @property
    def password(self):
        """Gets the password of this Location.  # noqa: E501

        Location password (plain text). Returned only if requested by the `include` parameter.  # noqa: E501

        :return: The password of this Location.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this Location.

        Location password (plain text). Returned only if requested by the `include` parameter.  # noqa: E501

        :param password: The password of this Location.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def iodevices(self):
        """Gets the iodevices of this Location.  # noqa: E501

        Returned only if requested by the `include` parameter.  # noqa: E501

        :return: The iodevices of this Location.  # noqa: E501
        :rtype: list[Device]
        """
        return self._iodevices

    @iodevices.setter
    def iodevices(self, iodevices):
        """Sets the iodevices of this Location.

        Returned only if requested by the `include` parameter.  # noqa: E501

        :param iodevices: The iodevices of this Location.  # noqa: E501
        :type: list[Device]
        """

        self._iodevices = iodevices

    @property
    def channel_groups(self):
        """Gets the channel_groups of this Location.  # noqa: E501

        Returned only if requested by the `include` parameter.  # noqa: E501

        :return: The channel_groups of this Location.  # noqa: E501
        :rtype: list[ChannelGroup]
        """
        return self._channel_groups

    @channel_groups.setter
    def channel_groups(self, channel_groups):
        """Sets the channel_groups of this Location.

        Returned only if requested by the `include` parameter.  # noqa: E501

        :param channel_groups: The channel_groups of this Location.  # noqa: E501
        :type: list[ChannelGroup]
        """

        self._channel_groups = channel_groups

    @property
    def access_ids(self):
        """Gets the access_ids of this Location.  # noqa: E501

        Returned only if requested by the `include` parameter.  # noqa: E501

        :return: The access_ids of this Location.  # noqa: E501
        :rtype: list[AccessIdentifier]
        """
        return self._access_ids

    @access_ids.setter
    def access_ids(self, access_ids):
        """Sets the access_ids of this Location.

        Returned only if requested by the `include` parameter.  # noqa: E501

        :param access_ids: The access_ids of this Location.  # noqa: E501
        :type: list[AccessIdentifier]
        """

        self._access_ids = access_ids

    @property
    def channels(self):
        """Gets the channels of this Location.  # noqa: E501

        Returned only if requested by the `include` parameter.  # noqa: E501

        :return: The channels of this Location.  # noqa: E501
        :rtype: list[Channel]
        """
        return self._channels

    @channels.setter
    def channels(self, channels):
        """Sets the channels of this Location.

        Returned only if requested by the `include` parameter.  # noqa: E501

        :param channels: The channels of this Location.  # noqa: E501
        :type: list[Channel]
        """

        self._channels = channels

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Location, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Location):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

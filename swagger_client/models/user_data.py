# coding: utf-8

"""
    SUPLA Cloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class UserData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'short_unique_id': 'str',
        'email': 'str',
        'timezone': 'str',
        'clients_registration_enabled': 'datetime',
        'io_devices_registration_enabled': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'short_unique_id': 'shortUniqueId',
        'email': 'email',
        'timezone': 'timezone',
        'clients_registration_enabled': 'clientsRegistrationEnabled',
        'io_devices_registration_enabled': 'ioDevicesRegistrationEnabled'
    }

    def __init__(self, id=None, short_unique_id=None, email=None, timezone=None, clients_registration_enabled=None, io_devices_registration_enabled=None):  # noqa: E501
        """UserData - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._short_unique_id = None
        self._email = None
        self._timezone = None
        self._clients_registration_enabled = None
        self._io_devices_registration_enabled = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if short_unique_id is not None:
            self.short_unique_id = short_unique_id
        if email is not None:
            self.email = email
        if timezone is not None:
            self.timezone = timezone
        if clients_registration_enabled is not None:
            self.clients_registration_enabled = clients_registration_enabled
        if io_devices_registration_enabled is not None:
            self.io_devices_registration_enabled = io_devices_registration_enabled

    @property
    def id(self):
        """Gets the id of this UserData.  # noqa: E501


        :return: The id of this UserData.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserData.


        :param id: The id of this UserData.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def short_unique_id(self):
        """Gets the short_unique_id of this UserData.  # noqa: E501


        :return: The short_unique_id of this UserData.  # noqa: E501
        :rtype: str
        """
        return self._short_unique_id

    @short_unique_id.setter
    def short_unique_id(self, short_unique_id):
        """Sets the short_unique_id of this UserData.


        :param short_unique_id: The short_unique_id of this UserData.  # noqa: E501
        :type: str
        """

        self._short_unique_id = short_unique_id

    @property
    def email(self):
        """Gets the email of this UserData.  # noqa: E501


        :return: The email of this UserData.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserData.


        :param email: The email of this UserData.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def timezone(self):
        """Gets the timezone of this UserData.  # noqa: E501


        :return: The timezone of this UserData.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this UserData.


        :param timezone: The timezone of this UserData.  # noqa: E501
        :type: str
        """

        self._timezone = timezone

    @property
    def clients_registration_enabled(self):
        """Gets the clients_registration_enabled of this UserData.  # noqa: E501


        :return: The clients_registration_enabled of this UserData.  # noqa: E501
        :rtype: datetime
        """
        return self._clients_registration_enabled

    @clients_registration_enabled.setter
    def clients_registration_enabled(self, clients_registration_enabled):
        """Sets the clients_registration_enabled of this UserData.


        :param clients_registration_enabled: The clients_registration_enabled of this UserData.  # noqa: E501
        :type: datetime
        """

        self._clients_registration_enabled = clients_registration_enabled

    @property
    def io_devices_registration_enabled(self):
        """Gets the io_devices_registration_enabled of this UserData.  # noqa: E501


        :return: The io_devices_registration_enabled of this UserData.  # noqa: E501
        :rtype: datetime
        """
        return self._io_devices_registration_enabled

    @io_devices_registration_enabled.setter
    def io_devices_registration_enabled(self, io_devices_registration_enabled):
        """Sets the io_devices_registration_enabled of this UserData.


        :param io_devices_registration_enabled: The io_devices_registration_enabled of this UserData.  # noqa: E501
        :type: datetime
        """

        self._io_devices_registration_enabled = io_devices_registration_enabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
